name: Build check and release if on main

on:
  pull_request:
  push:
    branches:
      - "**"
    paths:
      - "src/**"
      - "examples/**"
      - "Cargo.toml"
      - "Cargo.lock"

permissions:
  pull-requests: write
  contents: write
  packages: write
  issues: write
  actions: write

jobs:
  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1 #@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: thumbv6m-none-eabi

      - name: Install cargo-all-features
        run: cargo install cargo-all-features

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libudev-dev

      - name: Install elf2uf2-rs
        run: cargo install elf2uf2-rs

      - name: Test all features
        run: |
          cargo check-all-features --target thumbv6m-none-eabi

      - name: Cargo publish dry run
        run: cargo publish --dry-run --target thumbv6m-none-eabi

        # Test build examples, does not release
      - name: Test build examples (without releaseing)
        run: |
          cargo build --release --example hello_world --target thumbv6m-none-eabi
          cargo build --release --example menu --target thumbv6m-none-eabi
          cargo build --release --example button_test_async --target thumbv6m-none-eabi
          cargo build --release --example button_test_poll --target thumbv6m-none-eabi --features button-poll --no-default-features
          cargo build --release --example snake --target thumbv6m-none-eabi
          cargo build --release --example bricks --target thumbv6m-none-eabi
          cargo build --release --example sprite_test --target thumbv6m-none-eabi
          cargo build --release --example usb_serial --target thumbv6m-none-eabi

      - name: Convert ELF to UF2
        run: |
          mkdir artifacts
          for f in target/thumbv6m-none-eabi/release/examples/*; do
            [ -f "$f" ] || continue
            filename=$(basename "$f")
            if [[ "$filename" == *-* || "$filename" == *.* ]]; then
              echo "Skipping $filename"
              continue
            fi
            elf2uf2-rs "$f" "artifacts/${filename}.uf2"
          done

      - name: Upload UF2 build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: uf2-artifacts
          path: artifacts/

      - name: Comment UF2 artifact link on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifactName = "uf2-artifacts";
            const runId = context.runId;
            const repo = context.repo;
            const artifactsUrl = `https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}`;
            const commit = context.payload.pull_request.head.sha.slice(0, 7); // short SHA

            const body = `üõ†Ô∏è Download build artifacts [here](${artifactsUrl}) (look for **${artifactName}**). \nBuilt from commit \`${commit}\` `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: repo.owner,
              repo: repo.repo,
              body: body,
            });

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv6m-none-eabi

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libudev-dev

      - name: Install elf2uf2-rs
        run: cargo install elf2uf2-rs

      # Build release examples
      - name: Build examples for release
        run: |
          cargo build --release --example hello_world --target thumbv6m-none-eabi
          cargo build --release --example menu --target thumbv6m-none-eabi
          cargo build --release --example snake --target thumbv6m-none-eabi
          cargo build --release --example bricks --target thumbv6m-none-eabi
          cargo build --release --example sprite_test --target thumbv6m-none-eabi

      # Safely delete old release and tag
      - name: Delete old release and tag (latest)
        run: |
          tag="latest"
          gh release delete "$tag" --yes || true
          git push origin :refs/tags/$tag || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Recreate latest tag and release
      - name: Recreate latest tag and release
        run: |
          tag="latest"
          git tag -f "$tag"
          git push origin "$tag" --force
          gh release create "$tag" --title "Latest Build" --notes "Automated rebuild at $GITHUB_SHA"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Convert ELF to UF2
      - name: Convert ELF to UF2
        run: |
          mkdir -p artifacts
          for f in target/thumbv6m-none-eabi/release/examples/*; do
            [ -f "$f" ] || continue
            filename=$(basename "$f")
            if [[ "$filename" == *-* || "$filename" == *.* ]]; then
              echo "Skipping $filename"
              continue
            fi
            elf2uf2-rs "$f" "artifacts/${filename}.uf2"
          done

      # Upload UF2 artifacts to GitHub Release
      - name: Upload UF2 artifacts to GitHub Release
        run: |
          for f in artifacts/*.uf2; do
            gh release upload latest "$f" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Generate Documentation
      - name: Generate Documentation
        run: |
          cargo doc --no-deps --target thumbv6m-none-eabi --all-features
          mkdir -p docs
          cp -r target/thumbv6m-none-eabi/doc/* docs/

      # Deploy Documentation
      - name: Deploy Documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs
